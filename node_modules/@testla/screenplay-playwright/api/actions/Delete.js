"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Delete = void 0;
const UseAPI_1 = require("../abilities/UseAPI");
const constants_1 = require("../constants");
const ARequest_1 = require("./ARequest");
/**
 * Action Class. Send a HTTP DELETE Request.
 */
class Delete extends ARequest_1.ARequest {
    constructor(url) {
        super();
        this.url = url;
        this.responseBodyFormat = 'json';
    }
    /**
     * Send a HTTP DELETE request to the specified url.
     *
     * @param {Actor} actor the used actor
     * @return {Response} the response
     */
    performAs(actor) {
        return __awaiter(this, void 0, void 0, function* () {
            return UseAPI_1.UseAPI.as(actor, this.abilityAlias).sendRequest(constants_1.RequestMethod.DELETE, this.url, this.headers, this.responseBodyFormat);
        });
    }
    /**
     * Send a HTTP DELETE request to the specified url.
     *
     * @param {string} url the URL of the target.
     * @return {Delete} new instance
     */
    static from(url) {
        const instance = new Delete(url);
        instance.setCallStackInitializeCalledWith({ url });
        return instance;
    }
    /**
     * Add headers to the HTTP DELETE request to send.
     *
     * @param {Headers} headers the headers.
     * @return {Delete} the existing instance
     */
    withHeaders(headers) {
        this.headers = headers;
        this.addToCallStack({ caller: 'withHeaders', calledWith: { headers } });
        return this;
    }
    /**
     * Set the format the response body should be returned as.
     *
     * @param {ResponseBodyFormat} responseBodyFormat the format of the response body.
     * @return {Delete} the existing instance
     */
    withResponseBodyFormat(responseBodyFormat) {
        this.responseBodyFormat = responseBodyFormat;
        this.addToCallStack({ caller: 'withResponseBodyFormat', calledWith: { responseBodyFormat } });
        return this;
    }
}
exports.Delete = Delete;
