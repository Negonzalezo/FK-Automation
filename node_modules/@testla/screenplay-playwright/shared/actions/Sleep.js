"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sleep = void 0;
const screenplay_1 = require("@testla/screenplay");
/**
 * Action Class. Pauses further test execution for a while. Does not require a particular Ability.
 */
class Sleep extends screenplay_1.Action {
    constructor(ms) {
        super();
        this.ms = ms;
    }
    /**
     * Pause the execution of further test steps for a given interval in milliseconds.
     * @return {void} void
     */
    performAs() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-promise-executor-return
            return new Promise((resolve) => setTimeout(resolve, this.ms));
        });
    }
    /**
     * Pause the execution of further test steps for a given interval in milliseconds.
     *
     * @param {number} ms interval in milliseconds.
     * @return {Sleep} new Sleep instance
     */
    static for(ms) {
        const instance = new Sleep(ms);
        instance.setCallStackInitializeCalledWith({ ms });
        return instance;
    }
}
exports.Sleep = Sleep;
