"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Download = void 0;
const screenplay_1 = require("@testla/screenplay");
const Wait_1 = require("./Wait");
const Click_1 = require("./Click");
/**
 * Action Class. Download.
 */
class Download extends screenplay_1.Action {
    constructor(selector, options) {
        super();
        this.selector = selector;
        this.options = options;
    }
    /**
     * Downloads the file.
     *
     * @param {Actor} actor Actor performing this action
     * @return {boolean} returns true if download is successful
     */
    performAs(actor) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const [download] = yield Promise.all([
                actor.attemptsTo(Wait_1.Wait.forEvent('download')),
                actor.attemptsTo(Click_1.Click.on(this.selector, this.options)),
            ]);
            if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.filepath) {
                const fileName = ((_b = this.options) === null || _b === void 0 ? void 0 : _b.filename) || download.suggestedFilename();
                const filePath = `${(_c = this.options) === null || _c === void 0 ? void 0 : _c.filepath}/${fileName}`;
                yield download.saveAs(filePath);
            }
            else {
                yield download.path();
            }
            return true;
        });
    }
    /**
     * Download file
     *
     * @param {Selector} selector the selector to start the download.
     * @param {SelectorOptions} options (optional) the selector options including a potential filepath and filename.
     * @return {Download} new Download instance
     */
    static file(selector, options) {
        const instance = new Download(selector, options);
        instance.setCallStackInitializeCalledWith({ selector, options });
        return instance;
    }
}
exports.Download = Download;
