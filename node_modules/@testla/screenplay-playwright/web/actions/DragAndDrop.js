"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DragAndDrop = void 0;
const BrowseTheWeb_1 = require("../abilities/BrowseTheWeb");
const FrameEnabledAction_1 = require("../templates/FrameEnabledAction");
/**
 * Action Class. DragAndDrop an element specified by a selector string and drop it on an element specified by another
 * selector string.
 */
class DragAndDrop extends FrameEnabledAction_1.FrameEnabledAction {
    constructor(sourceSelector, targetSelector, options) {
        super();
        this.sourceSelector = sourceSelector;
        this.targetSelector = targetSelector;
        this.options = options;
    }
    /**
     * drag the specified selector and drop it on the target.
     * @param {Actor} actor Actor performing this action
     * @return {void} Returns after dragging the locator to another target locator or target position
     */
    performAs(actor) {
        return __awaiter(this, void 0, void 0, function* () {
            const { abilityAlias, sourceSelector, targetSelector, options, frameTree, } = this;
            const browseTheWeb = BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias);
            const target = yield browseTheWeb.resolveSelectorToLocator(targetSelector, options === null || options === void 0 ? void 0 : options.target, frameTree);
            const source = yield browseTheWeb.resolveSelectorToLocator(sourceSelector, options === null || options === void 0 ? void 0 : options.source, frameTree);
            return source.dragTo(target, { targetPosition: { x: 0, y: 0 } });
        });
    }
    /**
     * Drag the specified source element to the specified target element and drop it.
     *
     * @param {Selector} sourceSelector the selector of the source element.
     * @param {Selector} targetSelector the selector of the target element.
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {DragAndDrop} new DragAndDrop instance
     */
    static execute(sourceSelector, targetSelector, options) {
        const instance = new DragAndDrop(sourceSelector, targetSelector, options);
        instance.setCallStackInitializeCalledWith({ sourceSelector, targetSelector, options });
        return instance;
    }
}
exports.DragAndDrop = DragAndDrop;
