import { Actor } from '@testla/screenplay';
import { Selector, SelectorOptions } from '../types';
import { FrameEnabledAction } from '../templates/FrameEnabledAction';
/**
 * Action Class. Get either Cookies, Session Storage Items, Local Storage Items or Elements from the Browser.
 */
export declare class Get extends FrameEnabledAction {
    private mode;
    private payload;
    private constructor();
    /**
     * Get either Cookies, Session Storage Items, Local Storage Items or Elements from the Browser.
     *
     * @param {Actor} actor Actor performing this action
     * @return {any} Returns cookies, session storage items, local storage items or Locator(s)
     */
    performAs(actor: Actor): Promise<any>;
    private static getStorageItem;
    /**
     * Get the specified cookies.
     *
     * @param {string} urls (optional): If URLs are specified, only cookies that affect those URLs are returned. If no URLs are specified, this all cookies are returned.
     * @return {Get} new Get instance for cookies
     */
    static cookies(urls?: string | string[] | undefined): Get;
    /**
     * Get a session storage item.
     *
     * @param {string} key the key that specifies the item.
     * @return {Get} new Get instance for session storage
     */
    static sessionStorageItem(key: string): Get;
    /**
     * Get a local storage item.
     *
     * @param {string} key the key that specifies the item.
     * @return {Get} new Get instance for local storage
     */
    static localStorageItem(key: string): Get;
    /**
     * Get a single screen element by its Selector
     *
     * @param {Selector} selector the string or locator representing the selector.
     * @param {SelectorOptions} options (optional): advanced selector lookup options.
     * @returns new Get instance
     */
    static element(selector: Selector, options?: SelectorOptions): Get;
    /**
     * Get a list of screen elements by its Selector
     *
     * @param {Selector} selector the string or locator representing the selector.
     * @param {SelectorOptions} options (optional): advanced selector lookup options.
     * @returns new Get instance
     */
    static elements(selector: Selector, options?: SelectorOptions): Get;
}
