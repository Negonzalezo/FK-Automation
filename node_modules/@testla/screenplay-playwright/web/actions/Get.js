"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Get = void 0;
const BrowseTheWeb_1 = require("../abilities/BrowseTheWeb");
const FrameEnabledAction_1 = require("../templates/FrameEnabledAction");
/**
 * Action Class. Get either Cookies, Session Storage Items, Local Storage Items or Elements from the Browser.
 */
class Get extends FrameEnabledAction_1.FrameEnabledAction {
    constructor(mode, payload) {
        super();
        this.mode = mode;
        this.payload = payload;
    }
    /**
     * Get either Cookies, Session Storage Items, Local Storage Items or Elements from the Browser.
     *
     * @param {Actor} actor Actor performing this action
     * @return {any} Returns cookies, session storage items, local storage items or Locator(s)
     */
    performAs(actor) {
        return __awaiter(this, void 0, void 0, function* () {
            const { abilityAlias, payload, mode, frameTree, } = this;
            const page = BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).getPage();
            if (mode === 'cookies') {
                return page.context().cookies(payload);
            }
            if (mode === 'sessionStorage' || mode === 'localStorage') {
                return Get.getStorageItem(page, mode, payload);
            }
            // fallback: mode === 'element'
            const locator = (yield BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).resolveSelectorToLocator(payload.selector, Object.assign(Object.assign({}, payload.options), { evaluateVisible: false }), frameTree)).filter();
            return payload.singular === false ? locator.all() : locator.first();
        });
    }
    static getStorageItem(page, storageType, key) {
        return __awaiter(this, void 0, void 0, function* () {
            return page.evaluate(({ k, t }) => {
                const storage = t === 'sessionStorage' ? sessionStorage : localStorage;
                const value = storage.getItem(k);
                if (value) {
                    return Promise.resolve(JSON.parse(value));
                }
                return Promise.resolve(undefined);
            }, { k: key, t: storageType });
        });
    }
    /**
     * Get the specified cookies.
     *
     * @param {string} urls (optional): If URLs are specified, only cookies that affect those URLs are returned. If no URLs are specified, this all cookies are returned.
     * @return {Get} new Get instance for cookies
     */
    static cookies(urls) {
        const instance = new Get('cookies', urls);
        instance.setCallStackInitializeCalledWith({ urls });
        return instance;
    }
    /**
     * Get a session storage item.
     *
     * @param {string} key the key that specifies the item.
     * @return {Get} new Get instance for session storage
     */
    static sessionStorageItem(key) {
        const instance = new Get('sessionStorage', key);
        instance.setCallStackInitializeCalledWith({ key });
        return instance;
    }
    /**
     * Get a local storage item.
     *
     * @param {string} key the key that specifies the item.
     * @return {Get} new Get instance for local storage
     */
    static localStorageItem(key) {
        const instance = new Get('localStorage', key);
        instance.setCallStackInitializeCalledWith({ key });
        return instance;
    }
    /**
     * Get a single screen element by its Selector
     *
     * @param {Selector} selector the string or locator representing the selector.
     * @param {SelectorOptions} options (optional): advanced selector lookup options.
     * @returns new Get instance
     */
    static element(selector, options) {
        const instance = new Get('element', { selector, options });
        instance.setCallStackInitializeCalledWith({ selector, options });
        return instance;
    }
    /**
     * Get a list of screen elements by its Selector
     *
     * @param {Selector} selector the string or locator representing the selector.
     * @param {SelectorOptions} options (optional): advanced selector lookup options.
     * @returns new Get instance
     */
    static elements(selector, options) {
        const instance = new Get('element', { selector, options, singular: false });
        instance.setCallStackInitializeCalledWith({ selector, options });
        return instance;
    }
}
exports.Get = Get;
