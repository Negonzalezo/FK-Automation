"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hover = void 0;
const BrowseTheWeb_1 = require("../abilities/BrowseTheWeb");
const FrameEnabledAction_1 = require("../templates/FrameEnabledAction");
/**
 * Action Class. Hover over an element specified by a selector string.
 */
class Hover extends FrameEnabledAction_1.FrameEnabledAction {
    constructor(selector, options) {
        super();
        this.selector = selector;
        this.options = options;
    }
    /**
     * find the specified selector and hover over it.
     *
     * @param {Actor} actor Actor performing this action
     * @return {void} Returns when hovered over the element
     */
    performAs(actor) {
        return __awaiter(this, void 0, void 0, function* () {
            const { abilityAlias, selector, options, frameTree, } = this;
            const locator = yield BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).resolveSelectorToLocator(selector, options, frameTree);
            return locator.hover({ modifiers: options === null || options === void 0 ? void 0 : options.modifiers });
        });
    }
    /**
     * Specify which selector should be hovered over
     *
     * @param {Selector} selector The selector that should be hovered over.
     * @param {SelectorOptions} options (optional) advanced selector lookup options + Modifier keys to press. Ensures that only these modifiers are pressed during the operation.
     * @return {Hover} new Hover instance
     */
    static over(selector, options) {
        const instance = new Hover(selector, options);
        instance.setCallStackInitializeCalledWith({ selector, options });
        return instance;
    }
}
exports.Hover = Hover;
