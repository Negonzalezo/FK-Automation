"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Press = void 0;
const BrowseTheWeb_1 = require("../abilities/BrowseTheWeb");
const FrameEnabledAction_1 = require("../templates/FrameEnabledAction");
const constants_1 = require("../../constants");
/**
 * Action Class. Press the specified key on the keyboard.
 */
class Press extends FrameEnabledAction_1.FrameEnabledAction {
    constructor(mode, payload) {
        super();
        this.mode = mode;
        this.payload = payload;
    }
    /**
     * Press the specified key.
     *
     * @param {Actor} actor Actor performing this action
     * @return {void} Returns when the `key` can specify the intended value or a single character to generate the text for.
     */
    performAs(actor) {
        return __awaiter(this, void 0, void 0, function* () {
            const { abilityAlias, payload, frameTree, } = this;
            if (this.mode === 'key') {
                const page = BrowseTheWeb_1.BrowseTheWeb.as(actor, this.abilityAlias).getPage();
                return page.keyboard.press(payload.keys);
            }
            const locator = yield BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).resolveSelectorToLocator(payload.selector, payload.options, frameTree);
            return locator.pressSequentially(payload.input);
        });
    }
    /**
     * Press a key on the keyboard. (or multiple keys with +, e.g. Shift+A)
     *
     * @param {string} keys the key(s) to press.
     * @return {Press} new Press instance
     */
    static key(keys) {
        const instance = new Press('key', { keys });
        instance.setCallStackInitializeCalledWith({ keys });
        return instance;
    }
    /**
     * Types the given input into the element specified by the selector.
     * @param {Selector} selector The selector of the source element.
     * @param {string} input The input to type into the element.
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {Press} new Press instance
     */
    static sequentially(selector, input, options) {
        const instance = new Press('sequentially', { selector, input, options });
        const inputToLog = (options === null || options === void 0 ? void 0 : options.maskInLogs) ? constants_1.MASKING_STRING : input;
        instance.setCallStackInitializeCalledWith({ selector, input: inputToLog, options });
        return instance;
    }
}
exports.Press = Press;
