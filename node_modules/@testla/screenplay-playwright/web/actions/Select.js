"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
const BrowseTheWeb_1 = require("../abilities/BrowseTheWeb");
const FrameEnabledAction_1 = require("../templates/FrameEnabledAction");
/**
 * Action Class. Set the value of a Selector of type select to the given option.
 */
class Select extends FrameEnabledAction_1.FrameEnabledAction {
    constructor(selector, option, selectorOptions) {
        super();
        this.selector = selector;
        this.option = option;
        this.selectorOptions = selectorOptions;
    }
    /**
     * find the specified selector and click on it.
     *
     * @param {Actor} actor Actor performing this action
     * @return {any} This method checks, waits until all specified options are present in the `<select>` element and selects these options.
     */
    performAs(actor) {
        return __awaiter(this, void 0, void 0, function* () {
            const { option, selector, selectorOptions, frameTree, abilityAlias, } = this;
            const locator = yield BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).resolveSelectorToLocator(selector, selectorOptions, frameTree);
            return locator.selectOption(option);
        });
    }
    /**
     * Set the value of a Selector of type select to the given option.
     *
     * @param {Selector} selector the string representing the (select) selector.
     * @param {string|number} option optionLabel the label of the option.
     * @param {SelectorOptions} selectorOptions (optional): advanced selector lookup options.
     * @return {Select} new Select instance
     */
    static option(selector, option, selectorOptions) {
        const instance = new Select(selector, option, selectorOptions);
        instance.setCallStackInitializeCalledWith({ selector, option, selectorOptions });
        return instance;
    }
}
exports.Select = Select;
