"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
const BrowseTheWeb_1 = require("../abilities/BrowseTheWeb");
const FrameEnabledAction_1 = require("../templates/FrameEnabledAction");
const constants_1 = require("../../constants");
/**
 * Action Class. Type specified input into an element specified by a selector string.
 */
class Type extends FrameEnabledAction_1.FrameEnabledAction {
    constructor(selector, input, options) {
        super();
        this.selector = selector;
        this.options = options;
        this.input = input;
    }
    /**
     * find the specified selector and fill it.
     *
     * @param {Actor} actor the actor which is used
     * @return {void} Focuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.
     */
    performAs(actor) {
        return __awaiter(this, void 0, void 0, function* () {
            const { abilityAlias, selector, options, frameTree, input, } = this;
            const locator = yield BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).resolveSelectorToLocator(selector, options, frameTree);
            return locator.type(input);
        });
    }
    /**
     * Finds the specified selector and will it with the specified input string.
     *
     * @param {Selector} selector the selector.
     * @param {string} input the input.
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {Type} new Type instance
     * @deprecated Please use Press.sequentially instead. This function will be removed in the future.
     */
    static in(selector, input, options) {
        const instance = new Type(selector, input, options);
        const inputToLog = (options === null || options === void 0 ? void 0 : options.maskInLogs) ? constants_1.MASKING_STRING : input;
        instance.setCallStackInitializeCalledWith({ selector, input: inputToLog, options });
        return instance;
    }
}
exports.Type = Type;
