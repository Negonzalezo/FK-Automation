"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wait = void 0;
const BrowseTheWeb_1 = require("../abilities/BrowseTheWeb");
const FrameEnabledAction_1 = require("../templates/FrameEnabledAction");
/**
 * Action Class. Wait for either a specified loading state or for a selector to become visible/active.
 */
class Wait extends FrameEnabledAction_1.FrameEnabledAction {
    constructor(action) {
        super();
        this.action = action;
    }
    /**
     * wait for either a specified loading state or for a selector to become visible/active.
     *
     * @param {Actor} actor the actor object
     * @return {any} Returns when the required load state has been reached.
     */
    performAs(actor) {
        return __awaiter(this, void 0, void 0, function* () {
            const { abilityAlias, action, frameTree } = this;
            if (this.action.mode === 'loadState') {
                const page = BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).getPage();
                return page.waitForLoadState(action.payload.state);
            }
            if (this.action.mode === 'event') {
                const page = BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).getPage();
                return page.waitForEvent(action.payload.event);
            }
            // fallback: action.mode === 'selector'
            return BrowseTheWeb_1.BrowseTheWeb.as(actor, abilityAlias).resolveSelectorToLocator(action.payload.selector, action.payload.options, frameTree);
        });
    }
    /**
     * Wait for a specific status of the page.
     *
     * @param {string} state either 'load', 'domcontentloaded' or 'networkidle'
     * @return {Wait} new Wait instance
     */
    static forLoadState(state) {
        const instance = new Wait({ mode: 'loadState', payload: { state } });
        instance.setCallStackInitializeCalledWith({ state });
        return instance;
    }
    /**
     * Wait for a specific selector to exist.
     *
     * @param {Selector} selector the selector.
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {Wait} new Wait instance
     */
    static forSelector(selector, options) {
        const instance = new Wait({ mode: 'selector', payload: { selector, options } });
        instance.setCallStackInitializeCalledWith({ selector, options });
        return instance;
    }
    /**
     * Wait for a specific event.
     *
     * @param {string} event the event.
     * @return {Wait} new Wait instance
     */
    static forEvent(event) {
        const instance = new Wait({ mode: 'event', payload: { event } });
        instance.setCallStackInitializeCalledWith({ event });
        return instance;
    }
}
exports.Wait = Wait;
