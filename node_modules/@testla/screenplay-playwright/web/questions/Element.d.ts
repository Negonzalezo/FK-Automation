import { Actor } from '@testla/screenplay';
import { Selector, SelectorOptions } from '../types';
import { FrameEnabledQuestion } from '../templates/FrameEnabledQuestion';
/**
 * Question Class. Get a specified state for a selector like visible or enabled.
 */
export declare class Element extends FrameEnabledQuestion {
    private checkMode;
    private mode;
    private selector;
    private payload;
    private options?;
    private constructor();
    /**
     * Verifies if an element.
     *
     * @param {Actor} actor the actor
     * @return {boolean} if .is was called -> positive check, if .not was called -> negative check
     */
    answeredBy(actor: Actor): Promise<boolean>;
    /**
     * make the Question check for the positive.
     * @return {Element} new Element instance
     */
    static get toBe(): Element;
    /**
     * make the Question check for the negative.
     * @return {Element} new Element instance
     */
    static get notToBe(): Element;
    /**
     * make the Question check for the positive.
     * @return {Element} new Element instance
     */
    static get toHave(): Element;
    /**
     * make the Question check for the negative.
     * @return {Element} new Element instance
     */
    static get notToHave(): Element;
    /**
     * Verifies if an element is visible.
     *
     * @param {Selector} selector the selector
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {Element} this Element instance
     */
    visible(selector: Selector, options?: SelectorOptions): Element;
    /**
     * Verifies if an element is enabled.
     *
     * @param {Selector} selector the selector
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {Element} this Element instance
     */
    enabled(selector: Selector, options?: SelectorOptions): Element;
    /**
     * Verifies if an element has the given text.
     *
     * @param selector the selector.
     * @param text the text to check.
     * @param options (optional) advanced selector lookup options.
     */
    text(selector: Selector, text: string | RegExp | (string | RegExp)[], options?: SelectorOptions): Element;
    /**
     * Verifies if an element has the given value.
     *
     * @param selector the selector.
     * @param value the value to check.
     * @param options (optional) advanced selector lookup options.
     */
    value(selector: Selector, value: string | RegExp, options?: SelectorOptions): Element;
    /**
     * Verifies if an element has a minimum count.
     *
     * @param {Selector} selector the selector
     * @param {number} minimumCount the minimum count.
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {Element} this Element instance
     */
    minCount(selector: Selector, minimumCount: number, options?: SelectorOptions): Element;
    /**
     * Verifies if an element has a desired count.
     *
     * @param {Selector} selector the selector
     * @param {number} desiredCount the desired count.
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {Element} this Element instance
     */
    count(selector: Selector, desiredCount: number, options?: SelectorOptions): Element;
    /**
     * Verifies if an element is checked.
     *
     * @param {Selector} selector the selector
     * @param {SelectorOptions} options (optional) advanced selector lookup options.
     * @return {Element} this Element instance
     */
    checked(selector: Selector, options?: SelectorOptions): Element;
}
