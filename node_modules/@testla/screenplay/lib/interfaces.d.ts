import { EXEC_STATUS, ACTIVITY_TYPE } from './constants';
export interface IActor {
    attributes: {
        [key: string]: any;
    };
    with(key: string, value: any): IActor;
    states(key: string): any;
    asks<T>(...question: IQuestion<T>[]): Promise<T>;
    withAbilityTo(ability: IAbility, alias?: string): IAbility;
    can(ability: IAbility): IActor;
    attemptsTo(...activities: (ITask | IAction)[]): Promise<any>;
}
export type CallStackCalledWith = {
    [key: string]: any;
};
export type CallStackInfo = {
    caller: string;
    calledWith?: CallStackCalledWith;
    file?: string;
};
export interface ILogable {
    getCallStack?(): CallStackInfo[] | undefined;
}
export interface IAbility {
    name: string;
    alias?: string;
}
/**
 * An object representing an action that an {@link IActor} can perform.
 */
export interface IAction {
    /**
     *  Makes the provided {@link IActor}
     *  perform this Action.
     *
     * @param {IActor} actor
     * @returns {Promise<any>}
     *
     * @see {@link IActor}
     */
    performAs(actor: IActor): Promise<any>;
    /**
     * Returns the failAsFalse state
     * @returns if failAsFalse is set
     */
    getCanSkipOnFail(): boolean;
}
/**
 * An object representing a task that an {@link IActor} can perform.
 */
export interface ITask {
    /**
     *  Makes the provided {@link IActor}
     *  perform this Task.
     *
     * @param {IActor} actor
     * @returns {Promise<any>}
     *
     * @see {@link IActor}
     */
    performAs(actor: IActor): Promise<any>;
    /**
     * Returns the failAsFalse state
     * @returns if failAsFalse is set
     */
    getCanSkipOnFail(): boolean;
}
export interface IQuestion<T> {
    /**
     * Implementation of the query answer.
     *
     * @param {IActor} actor the actor that queries.
     */
    answeredBy(actor: IActor): Promise<T>;
    /**
     * Returns the failAsFalse state
     * @returns if failAsFalse is set
     */
    getIsFailAsFalse(): boolean;
}
export type ExecStatus = EXEC_STATUS;
export type ActivityType = ACTIVITY_TYPE;
export type LogEvent = {
    activityType: ActivityType;
    activityAction: string;
    activityDetails: string;
    status: ExecStatus;
    actor: string;
    filePath: string;
    skipOnFailLevel: number;
    wrapLevel: number;
    time: Date;
};
