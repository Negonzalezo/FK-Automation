import { IActor, IAbility, IAction, IQuestion, ITask, ILogable } from '../interfaces';
/**
 * Actors use abilities in order to execute tasks/actions and answer questions.
 */
export declare class Actor implements IActor {
    attributes: {
        [key: string]: any;
    };
    /**
     * Store an attribute in the actors attribute collection.
     * @param key attribute name
     * @param value attribute value
     * @returns {Actor}
     */
    with(key: string, value: any): Actor;
    /**
     * Get an attribute from the actors attribute collection.
     * @param key Key for the attribute
     * @returns Value for the requested attribute
     */
    states(key: string): any;
    private abilityMap;
    /** Create a new Actor with a given name. */
    static named(name: string): Actor;
    /**
     * Sets username and password for the actor.
     *
     * @param username
     * @param password
     * @returns the actor object
     *
     * @deprecated This method is deprecated and will be removed in the future. Use
     */
    withCredentials(username: string, password: string): Actor;
    private constructor();
    /**
     * Assign one or more abilities to the actor. e.g. Browsing, SFT-Client, HTTP-Client, ...
     *
     * @param abilities the abilities the actor will be able to use.
     */
    can(...abilities: IAbility[]): Actor;
    /**
     * Executes the given Tasks/Actions.
     *
     * @param activities a list of tasks to execute.
     */
    attemptsTo(...activities: (ITask | IAction)[]): Promise<any>;
    /**
     * Verify if the actor has the given ability.
     *
     * @param ability the ability.
     */
    withAbilityTo(ability: IAbility, alias?: string): IAbility;
    /**
     * Ask a question.
     *
     * @param question the question to ask.
     */
    asks<T>(...questions: (IQuestion<T> & ILogable)[]): Promise<T>;
}
