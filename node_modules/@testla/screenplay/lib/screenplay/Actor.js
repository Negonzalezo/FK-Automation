"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Actor = void 0;
const constants_1 = require("../constants");
const logger_1 = __importStar(require("../utils/logger"));
const Task_1 = require("./Task");
/**
 * Actors use abilities in order to execute tasks/actions and answer questions.
 */
class Actor {
    /**
     * Store an attribute in the actors attribute collection.
     * @param key attribute name
     * @param value attribute value
     * @returns {Actor}
     */
    with(key, value) {
        this.attributes = Object.assign(Object.assign({}, this.attributes), { [key]: value });
        return this;
    }
    /**
     * Get an attribute from the actors attribute collection.
     * @param key Key for the attribute
     * @returns Value for the requested attribute
     */
    states(key) {
        return this.attributes[key];
    }
    /** Create a new Actor with a given name. */
    static named(name) {
        return new Actor(name);
    }
    /**
     * Sets username and password for the actor.
     *
     * @param username
     * @param password
     * @returns the actor object
     *
     * @deprecated This method is deprecated and will be removed in the future. Use
     */
    withCredentials(username, password) {
        this.attributes.username = username;
        this.attributes.password = password;
        return this;
    }
    constructor(name) {
        // collection of attributes assigned to the actor
        this.attributes = {};
        // map of abilities of this Actor
        this.abilityMap = new Map();
        this.attributes = { name };
    }
    /**
     * Assign one or more abilities to the actor. e.g. Browsing, SFT-Client, HTTP-Client, ...
     *
     * @param abilities the abilities the actor will be able to use.
     */
    can(...abilities) {
        abilities.forEach((ability) => {
            const abilityIdentifier = `${ability.name}${ability.alias ? `-${ability.alias}` : ''}`;
            if (this.abilityMap.get(abilityIdentifier) !== undefined) {
                throw (new Error('Error: Ability with this identifier already defined'));
            }
            this.abilityMap.set(abilityIdentifier, ability);
        });
        return this;
    }
    /**
     * Executes the given Tasks/Actions.
     *
     * @param activities a list of tasks to execute.
     */
    attemptsTo(...activities) {
        return __awaiter(this, void 0, void 0, function* () {
            // execute each activity in order.
            const reducefn = (chain, activity) => __awaiter(this, void 0, void 0, function* () {
                return chain.then(() => __awaiter(this, void 0, void 0, function* () {
                    try {
                        if (activity.getCanSkipOnFail()) {
                            (0, logger_1.skipOnFailLevelUp)();
                        }
                        (0, logger_1.default)(this, activity, constants_1.EXEC_STATUS.START);
                        if (activity instanceof Task_1.Task) {
                            (0, logger_1.indentationLevelUp)();
                        }
                        let innerRes;
                        let skipped = false;
                        try {
                            innerRes = yield activity.performAs(this);
                        }
                        catch (e) {
                            // eslint-disable-next-line
                            if (activity.getCanSkipOnFail()) {
                                skipped = true;
                            }
                            else {
                                throw e;
                            }
                        }
                        if (activity instanceof Task_1.Task) {
                            (0, logger_1.indentationLevelDown)();
                        }
                        if (skipped) {
                            (0, logger_1.default)(this, activity, constants_1.EXEC_STATUS.FAILED);
                        }
                        (0, logger_1.default)(this, activity, skipped ? constants_1.EXEC_STATUS.SKIPPED : constants_1.EXEC_STATUS.SUCCESS);
                        if (activity.getCanSkipOnFail()) {
                            (0, logger_1.skipOnFailLevelDown)();
                        }
                        return Promise.resolve(innerRes);
                    }
                    catch (err) {
                        if (activity instanceof Task_1.Task) {
                            (0, logger_1.indentationLevelDown)();
                        }
                        (0, logger_1.default)(this, activity, constants_1.EXEC_STATUS.FAILED);
                        if (activity.getCanSkipOnFail()) {
                            (0, logger_1.skipOnFailLevelDown)();
                        }
                        throw (err);
                    }
                }));
            });
            const attempsRes = yield activities.reduce(reducefn, Promise.resolve());
            return Promise.resolve(attempsRes);
        });
    }
    /**
     * Verify if the actor has the given ability.
     *
     * @param ability the ability.
     */
    withAbilityTo(ability, alias) {
        const abilityIdentifier = `${ability.name}${alias ? `-${alias}` : ''}`;
        if (!this.abilityMap.has(abilityIdentifier)) {
            throw new Error(`Error: This Actor does not have the required ability '${ability.name}'${alias ? `(with alias '${alias}')` : ''}!`);
        }
        return this.abilityMap.get(abilityIdentifier);
    }
    /**
     * Ask a question.
     *
     * @param question the question to ask.
     */
    asks(...questions) {
        return __awaiter(this, void 0, void 0, function* () {
            // execute each activity in order.
            const reducefn = (chain, question) => __awaiter(this, void 0, void 0, function* () {
                return chain.then(() => __awaiter(this, void 0, void 0, function* () {
                    try {
                        (0, logger_1.default)(this, question, constants_1.EXEC_STATUS.START);
                        const innerRes = yield question.answeredBy(this);
                        (0, logger_1.default)(this, question, constants_1.EXEC_STATUS.SUCCESS);
                        return Promise.resolve(innerRes);
                    }
                    catch (err) {
                        if (question.getIsFailAsFalse()) {
                            (0, logger_1.default)(this, question, constants_1.EXEC_STATUS.SUCCESS);
                            return Promise.resolve(false);
                        }
                        (0, logger_1.default)(this, question, constants_1.EXEC_STATUS.FAILED);
                        throw (err);
                    }
                }));
            });
            const attempsRes = yield questions.reduce(reducefn, Promise.resolve());
            return Promise.resolve(attempsRes);
        });
    }
}
exports.Actor = Actor;
