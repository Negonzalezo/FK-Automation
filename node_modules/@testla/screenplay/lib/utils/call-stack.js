"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilePath = exports.printCallStack = exports.identifyCaller = void 0;
const FILE_REGEX = /at (.+)/;
const CALLER_REGEX_NON_QUESTION = /at Function.(.+) \(/;
const CALLER_REGEX_QUESTION = /at Function.get (.+) \[as/;
const identifyCallerLine = (lines) => {
    if (lines) {
        return lines.findIndex((line) => line.includes('at Function.'));
    }
    return -1;
};
/**
 * Identifies the current caller information
 * @returns caller and file
 */
const identifyCaller = () => {
    const { stack } = new Error();
    const stackLines = (stack === null || stack === void 0 ? void 0 : stack.split('\n')) || [''];
    const callerLineNo = identifyCallerLine(stackLines);
    const fileLineNo = callerLineNo + 1;
    const callerLine = stackLines[callerLineNo].trim();
    const fileLine = stackLines[fileLineNo].trim();
    const isQuestion = (callerLine || '').includes('Function.get ');
    const callerRegex = !isQuestion
        ? CALLER_REGEX_NON_QUESTION
        : CALLER_REGEX_QUESTION;
    // eslint-disable-next-line
    const callerName = callerLine === null || callerLine === void 0 ? void 0 : callerLine.match(callerRegex);
    const fileName = fileLine === null || fileLine === void 0 ? void 0 : fileLine.match(FILE_REGEX);
    return {
        caller: callerName ? callerName[1] : 'unknown',
        file: fileName ? fileName[1] : undefined,
    };
};
exports.identifyCaller = identifyCaller;
/**
 * Print full callstack
 * @param callStack the callstack information
 * @returns callstack as a string
 */
const printCallStack = (callStack) => {
    if (!callStack) {
        return '';
    }
    return callStack
        .map((info) => `.${info.caller}${info.calledWith ? '(' : ''}${Object.entries(info.calledWith || {})
        .map(([key, value]) => `${key}: ${typeof value === 'string' ? `'${value}'` : value}`)
        .join(', ')}${info.calledWith ? ')' : ''}`)
        .join('');
};
exports.printCallStack = printCallStack;
/**
 * Gets the filename without path
 * @param callStack the callstack information
 * @returns string
 */
const getFilePath = (callStack) => {
    var _a;
    if (callStack && ((_a = callStack[0]) === null || _a === void 0 ? void 0 : _a.file)) {
        const path = `${callStack[0].file.split('/').slice(-1)}`;
        return path.replaceAll(/[()]/ig, '');
    }
    return '';
};
exports.getFilePath = getFilePath;
