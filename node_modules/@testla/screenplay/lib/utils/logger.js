"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.indentationLevelDown = exports.indentationLevelUp = exports.skipOnFailLevelDown = exports.skipOnFailLevelUp = void 0;
const constants_1 = require("../constants");
const Question_1 = require("../screenplay/Question");
const Task_1 = require("../screenplay/Task");
const call_stack_1 = require("./call-stack");
const event_emitter_1 = __importDefault(require("./event-emitter"));
/**
 * Current skipOnFail level
 */
let skipOnFailLevel = 0;
/**
 * Highers the skipOnFailLevel level
 */
const skipOnFailLevelUp = () => { skipOnFailLevel += 1; };
exports.skipOnFailLevelUp = skipOnFailLevelUp;
/**
 * Lowers the skipOnFailLevel level
 */
const skipOnFailLevelDown = () => { skipOnFailLevel -= 1; };
exports.skipOnFailLevelDown = skipOnFailLevelDown;
/**
 * Current indentation level
 */
let indentationLevel = 0;
/**
 * Highers the indentation level
 */
const indentationLevelUp = () => { indentationLevel += 1; };
exports.indentationLevelUp = indentationLevelUp;
/**
 * Lowers the indentation level
 */
const indentationLevelDown = () => { indentationLevel -= 1; };
exports.indentationLevelDown = indentationLevelDown;
const identifyActivityType = (element) => {
    if (element instanceof Question_1.Question) {
        return constants_1.ACTIVITY_TYPE.QUESTION;
    }
    if (element instanceof Task_1.Task) {
        return constants_1.ACTIVITY_TYPE.TASK;
    }
    return constants_1.ACTIVITY_TYPE.ACTION;
};
/**
 * Writes the log information directly to stdout
 * @param actor THe actor who triggered an executable
 * @param element The executable
 */
const log = (actor, element, status) => {
    var _a, _b;
    const activityType = identifyActivityType(element);
    const evt = {
        activityType,
        activityAction: activityType === constants_1.ACTIVITY_TYPE.QUESTION ? 'asks' : 'attemptsTo',
        activityDetails: `${element.constructor.name}${(0, call_stack_1.printCallStack)((_a = element.getCallStack) === null || _a === void 0 ? void 0 : _a.call(element))}`,
        status,
        actor: actor.attributes.name,
        filePath: (0, call_stack_1.getFilePath)((_b = element.getCallStack) === null || _b === void 0 ? void 0 : _b.call(element)),
        skipOnFailLevel,
        wrapLevel: indentationLevel,
        time: new Date(),
    };
    event_emitter_1.default.emit('logEvent', evt);
};
exports.default = log;
