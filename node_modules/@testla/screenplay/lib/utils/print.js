"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printLogEventToStdout = void 0;
const constants_1 = require("../constants");
const event_1 = require("./event");
/**
 * Indents a message based on the indentation level
 * @param msg the message to be indented
 * @param level the indentation level
 * @returns final formatted message
 */
const blankifyMsg = (msg, level) => {
    let finalMsg = msg;
    for (let i = 0; i <= level * constants_1.LOGGING_BLANKS_PER_INDENTATION_LEVEL; i += 1) {
        finalMsg = ` ${finalMsg}`;
    }
    return finalMsg;
};
/**
 * @returns current time (UTC)
 */
const getCurrentTime = (date) => date
    .toISOString()
    .substring(11, 23);
/**
 * @param status of the activity
 * @returns status badge
 */
const getStatusText = (status, skipOnFailLevel) => {
    let badge = '';
    switch (status) {
        case constants_1.EXEC_STATUS.START:
            badge = 'EXEC';
            break;
        case constants_1.EXEC_STATUS.FAILED:
            badge = `${skipOnFailLevel === 0 ? constants_1.BASH_COLOR.RED_BG : ''}FAIL`;
            break;
        case constants_1.EXEC_STATUS.SKIPPED:
            badge = 'SKIP';
            break;
        default:
            badge = 'DONE';
    }
    return `${badge}${constants_1.BASH_COLOR.RESET}`;
};
const printLogEventToStdout = (event, raw = false) => {
    let log;
    if (raw) {
        log = `${(0, event_1.stringifyLogEvent)(event)}\n`;
    }
    else {
        const { activityType, status, actor, activityDetails, activityAction, skipOnFailLevel, wrapLevel, filePath, time, } = event;
        const isQuestion = activityType === constants_1.ACTIVITY_TYPE.QUESTION;
        const msg = `${status !== constants_1.EXEC_STATUS.FAILED ? (isQuestion ? '✔️' : '↪') : '✗'} ${actor} ${activityAction} ${activityDetails}`;
        const color = status === constants_1.EXEC_STATUS.FAILED && skipOnFailLevel === 0 ? constants_1.BASH_COLOR.RED : constants_1.BASH_COLOR.RESET;
        const msgActivityAndFile = `${msg}  ${constants_1.BASH_COLOR.GRAY}(${filePath})${constants_1.BASH_COLOR.RESET}`;
        log = `${constants_1.LOGGING_BASE_INDENTATION}${constants_1.BASH_COLOR.BLUE}testla:sp${constants_1.BASH_COLOR.GRAY} ${getCurrentTime(time)}  ${getStatusText(status, skipOnFailLevel)}${color} ${blankifyMsg(msgActivityAndFile, wrapLevel)}\n`;
    }
    process.stdout.write(log);
};
exports.printLogEventToStdout = printLogEventToStdout;
